/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.blueparrotriot.avro.student;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Student extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2621927467913586199L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Student\",\"namespace\":\"com.blueparrotriot.avro.student\",\"fields\":[{\"name\":\"id\",\"type\":\"double\"},{\"name\":\"female\",\"type\":\"string\"},{\"name\":\"ses\",\"type\":\"string\"},{\"name\":\"schtyp\",\"type\":\"string\"},{\"name\":\"prog\",\"type\":\"string\"},{\"name\":\"read\",\"type\":\"double\"},{\"name\":\"write\",\"type\":\"double\"},{\"name\":\"math\",\"type\":\"double\"},{\"name\":\"science\",\"type\":\"double\"},{\"name\":\"socst\",\"type\":\"double\"},{\"name\":\"honors\",\"type\":\"string\"},{\"name\":\"awards\",\"type\":\"double\"},{\"name\":\"cid\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Student> ENCODER =
      new BinaryMessageEncoder<Student>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Student> DECODER =
      new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Student> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Student> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Student> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Student>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Student to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Student from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Student instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Student fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double id;
  @Deprecated public java.lang.CharSequence female;
  @Deprecated public java.lang.CharSequence ses;
  @Deprecated public java.lang.CharSequence schtyp;
  @Deprecated public java.lang.CharSequence prog;
  @Deprecated public double read;
  @Deprecated public double write;
  @Deprecated public double math;
  @Deprecated public double science;
  @Deprecated public double socst;
  @Deprecated public java.lang.CharSequence honors;
  @Deprecated public double awards;
  @Deprecated public int cid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Student() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param female The new value for female
   * @param ses The new value for ses
   * @param schtyp The new value for schtyp
   * @param prog The new value for prog
   * @param read The new value for read
   * @param write The new value for write
   * @param math The new value for math
   * @param science The new value for science
   * @param socst The new value for socst
   * @param honors The new value for honors
   * @param awards The new value for awards
   * @param cid The new value for cid
   */
  public Student(java.lang.Double id, java.lang.CharSequence female, java.lang.CharSequence ses, java.lang.CharSequence schtyp, java.lang.CharSequence prog, java.lang.Double read, java.lang.Double write, java.lang.Double math, java.lang.Double science, java.lang.Double socst, java.lang.CharSequence honors, java.lang.Double awards, java.lang.Integer cid) {
    this.id = id;
    this.female = female;
    this.ses = ses;
    this.schtyp = schtyp;
    this.prog = prog;
    this.read = read;
    this.write = write;
    this.math = math;
    this.science = science;
    this.socst = socst;
    this.honors = honors;
    this.awards = awards;
    this.cid = cid;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return female;
    case 2: return ses;
    case 3: return schtyp;
    case 4: return prog;
    case 5: return read;
    case 6: return write;
    case 7: return math;
    case 8: return science;
    case 9: return socst;
    case 10: return honors;
    case 11: return awards;
    case 12: return cid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Double)value$; break;
    case 1: female = (java.lang.CharSequence)value$; break;
    case 2: ses = (java.lang.CharSequence)value$; break;
    case 3: schtyp = (java.lang.CharSequence)value$; break;
    case 4: prog = (java.lang.CharSequence)value$; break;
    case 5: read = (java.lang.Double)value$; break;
    case 6: write = (java.lang.Double)value$; break;
    case 7: math = (java.lang.Double)value$; break;
    case 8: science = (java.lang.Double)value$; break;
    case 9: socst = (java.lang.Double)value$; break;
    case 10: honors = (java.lang.CharSequence)value$; break;
    case 11: awards = (java.lang.Double)value$; break;
    case 12: cid = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public double getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(double value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'female' field.
   * @return The value of the 'female' field.
   */
  public java.lang.CharSequence getFemale() {
    return female;
  }


  /**
   * Sets the value of the 'female' field.
   * @param value the value to set.
   */
  public void setFemale(java.lang.CharSequence value) {
    this.female = value;
  }

  /**
   * Gets the value of the 'ses' field.
   * @return The value of the 'ses' field.
   */
  public java.lang.CharSequence getSes() {
    return ses;
  }


  /**
   * Sets the value of the 'ses' field.
   * @param value the value to set.
   */
  public void setSes(java.lang.CharSequence value) {
    this.ses = value;
  }

  /**
   * Gets the value of the 'schtyp' field.
   * @return The value of the 'schtyp' field.
   */
  public java.lang.CharSequence getSchtyp() {
    return schtyp;
  }


  /**
   * Sets the value of the 'schtyp' field.
   * @param value the value to set.
   */
  public void setSchtyp(java.lang.CharSequence value) {
    this.schtyp = value;
  }

  /**
   * Gets the value of the 'prog' field.
   * @return The value of the 'prog' field.
   */
  public java.lang.CharSequence getProg() {
    return prog;
  }


  /**
   * Sets the value of the 'prog' field.
   * @param value the value to set.
   */
  public void setProg(java.lang.CharSequence value) {
    this.prog = value;
  }

  /**
   * Gets the value of the 'read' field.
   * @return The value of the 'read' field.
   */
  public double getRead() {
    return read;
  }


  /**
   * Sets the value of the 'read' field.
   * @param value the value to set.
   */
  public void setRead(double value) {
    this.read = value;
  }

  /**
   * Gets the value of the 'write' field.
   * @return The value of the 'write' field.
   */
  public double getWrite() {
    return write;
  }


  /**
   * Sets the value of the 'write' field.
   * @param value the value to set.
   */
  public void setWrite(double value) {
    this.write = value;
  }

  /**
   * Gets the value of the 'math' field.
   * @return The value of the 'math' field.
   */
  public double getMath() {
    return math;
  }


  /**
   * Sets the value of the 'math' field.
   * @param value the value to set.
   */
  public void setMath(double value) {
    this.math = value;
  }

  /**
   * Gets the value of the 'science' field.
   * @return The value of the 'science' field.
   */
  public double getScience() {
    return science;
  }


  /**
   * Sets the value of the 'science' field.
   * @param value the value to set.
   */
  public void setScience(double value) {
    this.science = value;
  }

  /**
   * Gets the value of the 'socst' field.
   * @return The value of the 'socst' field.
   */
  public double getSocst() {
    return socst;
  }


  /**
   * Sets the value of the 'socst' field.
   * @param value the value to set.
   */
  public void setSocst(double value) {
    this.socst = value;
  }

  /**
   * Gets the value of the 'honors' field.
   * @return The value of the 'honors' field.
   */
  public java.lang.CharSequence getHonors() {
    return honors;
  }


  /**
   * Sets the value of the 'honors' field.
   * @param value the value to set.
   */
  public void setHonors(java.lang.CharSequence value) {
    this.honors = value;
  }

  /**
   * Gets the value of the 'awards' field.
   * @return The value of the 'awards' field.
   */
  public double getAwards() {
    return awards;
  }


  /**
   * Sets the value of the 'awards' field.
   * @param value the value to set.
   */
  public void setAwards(double value) {
    this.awards = value;
  }

  /**
   * Gets the value of the 'cid' field.
   * @return The value of the 'cid' field.
   */
  public int getCid() {
    return cid;
  }


  /**
   * Sets the value of the 'cid' field.
   * @param value the value to set.
   */
  public void setCid(int value) {
    this.cid = value;
  }

  /**
   * Creates a new Student RecordBuilder.
   * @return A new Student RecordBuilder
   */
  public static com.blueparrotriot.avro.student.Student.Builder newBuilder() {
    return new com.blueparrotriot.avro.student.Student.Builder();
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Student RecordBuilder
   */
  public static com.blueparrotriot.avro.student.Student.Builder newBuilder(com.blueparrotriot.avro.student.Student.Builder other) {
    if (other == null) {
      return new com.blueparrotriot.avro.student.Student.Builder();
    } else {
      return new com.blueparrotriot.avro.student.Student.Builder(other);
    }
  }

  /**
   * Creates a new Student RecordBuilder by copying an existing Student instance.
   * @param other The existing instance to copy.
   * @return A new Student RecordBuilder
   */
  public static com.blueparrotriot.avro.student.Student.Builder newBuilder(com.blueparrotriot.avro.student.Student other) {
    if (other == null) {
      return new com.blueparrotriot.avro.student.Student.Builder();
    } else {
      return new com.blueparrotriot.avro.student.Student.Builder(other);
    }
  }

  /**
   * RecordBuilder for Student instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Student>
    implements org.apache.avro.data.RecordBuilder<Student> {

    private double id;
    private java.lang.CharSequence female;
    private java.lang.CharSequence ses;
    private java.lang.CharSequence schtyp;
    private java.lang.CharSequence prog;
    private double read;
    private double write;
    private double math;
    private double science;
    private double socst;
    private java.lang.CharSequence honors;
    private double awards;
    private int cid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.blueparrotriot.avro.student.Student.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.female)) {
        this.female = data().deepCopy(fields()[1].schema(), other.female);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ses)) {
        this.ses = data().deepCopy(fields()[2].schema(), other.ses);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.schtyp)) {
        this.schtyp = data().deepCopy(fields()[3].schema(), other.schtyp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.prog)) {
        this.prog = data().deepCopy(fields()[4].schema(), other.prog);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.read)) {
        this.read = data().deepCopy(fields()[5].schema(), other.read);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.write)) {
        this.write = data().deepCopy(fields()[6].schema(), other.write);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.math)) {
        this.math = data().deepCopy(fields()[7].schema(), other.math);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.science)) {
        this.science = data().deepCopy(fields()[8].schema(), other.science);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.socst)) {
        this.socst = data().deepCopy(fields()[9].schema(), other.socst);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.honors)) {
        this.honors = data().deepCopy(fields()[10].schema(), other.honors);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.awards)) {
        this.awards = data().deepCopy(fields()[11].schema(), other.awards);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.cid)) {
        this.cid = data().deepCopy(fields()[12].schema(), other.cid);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing Student instance
     * @param other The existing instance to copy.
     */
    private Builder(com.blueparrotriot.avro.student.Student other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.female)) {
        this.female = data().deepCopy(fields()[1].schema(), other.female);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ses)) {
        this.ses = data().deepCopy(fields()[2].schema(), other.ses);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.schtyp)) {
        this.schtyp = data().deepCopy(fields()[3].schema(), other.schtyp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.prog)) {
        this.prog = data().deepCopy(fields()[4].schema(), other.prog);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.read)) {
        this.read = data().deepCopy(fields()[5].schema(), other.read);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.write)) {
        this.write = data().deepCopy(fields()[6].schema(), other.write);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.math)) {
        this.math = data().deepCopy(fields()[7].schema(), other.math);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.science)) {
        this.science = data().deepCopy(fields()[8].schema(), other.science);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.socst)) {
        this.socst = data().deepCopy(fields()[9].schema(), other.socst);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.honors)) {
        this.honors = data().deepCopy(fields()[10].schema(), other.honors);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.awards)) {
        this.awards = data().deepCopy(fields()[11].schema(), other.awards);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.cid)) {
        this.cid = data().deepCopy(fields()[12].schema(), other.cid);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public double getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setId(double value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'female' field.
      * @return The value.
      */
    public java.lang.CharSequence getFemale() {
      return female;
    }


    /**
      * Sets the value of the 'female' field.
      * @param value The value of 'female'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setFemale(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.female = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'female' field has been set.
      * @return True if the 'female' field has been set, false otherwise.
      */
    public boolean hasFemale() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'female' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearFemale() {
      female = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ses' field.
      * @return The value.
      */
    public java.lang.CharSequence getSes() {
      return ses;
    }


    /**
      * Sets the value of the 'ses' field.
      * @param value The value of 'ses'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setSes(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.ses = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ses' field has been set.
      * @return True if the 'ses' field has been set, false otherwise.
      */
    public boolean hasSes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ses' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearSes() {
      ses = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'schtyp' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchtyp() {
      return schtyp;
    }


    /**
      * Sets the value of the 'schtyp' field.
      * @param value The value of 'schtyp'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setSchtyp(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.schtyp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'schtyp' field has been set.
      * @return True if the 'schtyp' field has been set, false otherwise.
      */
    public boolean hasSchtyp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'schtyp' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearSchtyp() {
      schtyp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'prog' field.
      * @return The value.
      */
    public java.lang.CharSequence getProg() {
      return prog;
    }


    /**
      * Sets the value of the 'prog' field.
      * @param value The value of 'prog'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setProg(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.prog = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'prog' field has been set.
      * @return True if the 'prog' field has been set, false otherwise.
      */
    public boolean hasProg() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'prog' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearProg() {
      prog = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'read' field.
      * @return The value.
      */
    public double getRead() {
      return read;
    }


    /**
      * Sets the value of the 'read' field.
      * @param value The value of 'read'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setRead(double value) {
      validate(fields()[5], value);
      this.read = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'read' field has been set.
      * @return True if the 'read' field has been set, false otherwise.
      */
    public boolean hasRead() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'read' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearRead() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'write' field.
      * @return The value.
      */
    public double getWrite() {
      return write;
    }


    /**
      * Sets the value of the 'write' field.
      * @param value The value of 'write'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setWrite(double value) {
      validate(fields()[6], value);
      this.write = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'write' field has been set.
      * @return True if the 'write' field has been set, false otherwise.
      */
    public boolean hasWrite() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'write' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearWrite() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'math' field.
      * @return The value.
      */
    public double getMath() {
      return math;
    }


    /**
      * Sets the value of the 'math' field.
      * @param value The value of 'math'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setMath(double value) {
      validate(fields()[7], value);
      this.math = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'math' field has been set.
      * @return True if the 'math' field has been set, false otherwise.
      */
    public boolean hasMath() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'math' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearMath() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'science' field.
      * @return The value.
      */
    public double getScience() {
      return science;
    }


    /**
      * Sets the value of the 'science' field.
      * @param value The value of 'science'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setScience(double value) {
      validate(fields()[8], value);
      this.science = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'science' field has been set.
      * @return True if the 'science' field has been set, false otherwise.
      */
    public boolean hasScience() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'science' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearScience() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'socst' field.
      * @return The value.
      */
    public double getSocst() {
      return socst;
    }


    /**
      * Sets the value of the 'socst' field.
      * @param value The value of 'socst'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setSocst(double value) {
      validate(fields()[9], value);
      this.socst = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'socst' field has been set.
      * @return True if the 'socst' field has been set, false otherwise.
      */
    public boolean hasSocst() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'socst' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearSocst() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'honors' field.
      * @return The value.
      */
    public java.lang.CharSequence getHonors() {
      return honors;
    }


    /**
      * Sets the value of the 'honors' field.
      * @param value The value of 'honors'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setHonors(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.honors = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'honors' field has been set.
      * @return True if the 'honors' field has been set, false otherwise.
      */
    public boolean hasHonors() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'honors' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearHonors() {
      honors = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'awards' field.
      * @return The value.
      */
    public double getAwards() {
      return awards;
    }


    /**
      * Sets the value of the 'awards' field.
      * @param value The value of 'awards'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setAwards(double value) {
      validate(fields()[11], value);
      this.awards = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'awards' field has been set.
      * @return True if the 'awards' field has been set, false otherwise.
      */
    public boolean hasAwards() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'awards' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearAwards() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'cid' field.
      * @return The value.
      */
    public int getCid() {
      return cid;
    }


    /**
      * Sets the value of the 'cid' field.
      * @param value The value of 'cid'.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder setCid(int value) {
      validate(fields()[12], value);
      this.cid = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'cid' field has been set.
      * @return True if the 'cid' field has been set, false otherwise.
      */
    public boolean hasCid() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'cid' field.
      * @return This builder.
      */
    public com.blueparrotriot.avro.student.Student.Builder clearCid() {
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Student build() {
      try {
        Student record = new Student();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Double) defaultValue(fields()[0]);
        record.female = fieldSetFlags()[1] ? this.female : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.ses = fieldSetFlags()[2] ? this.ses : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.schtyp = fieldSetFlags()[3] ? this.schtyp : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.prog = fieldSetFlags()[4] ? this.prog : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.read = fieldSetFlags()[5] ? this.read : (java.lang.Double) defaultValue(fields()[5]);
        record.write = fieldSetFlags()[6] ? this.write : (java.lang.Double) defaultValue(fields()[6]);
        record.math = fieldSetFlags()[7] ? this.math : (java.lang.Double) defaultValue(fields()[7]);
        record.science = fieldSetFlags()[8] ? this.science : (java.lang.Double) defaultValue(fields()[8]);
        record.socst = fieldSetFlags()[9] ? this.socst : (java.lang.Double) defaultValue(fields()[9]);
        record.honors = fieldSetFlags()[10] ? this.honors : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.awards = fieldSetFlags()[11] ? this.awards : (java.lang.Double) defaultValue(fields()[11]);
        record.cid = fieldSetFlags()[12] ? this.cid : (java.lang.Integer) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Student>
    WRITER$ = (org.apache.avro.io.DatumWriter<Student>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Student>
    READER$ = (org.apache.avro.io.DatumReader<Student>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.id);

    out.writeString(this.female);

    out.writeString(this.ses);

    out.writeString(this.schtyp);

    out.writeString(this.prog);

    out.writeDouble(this.read);

    out.writeDouble(this.write);

    out.writeDouble(this.math);

    out.writeDouble(this.science);

    out.writeDouble(this.socst);

    out.writeString(this.honors);

    out.writeDouble(this.awards);

    out.writeInt(this.cid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readDouble();

      this.female = in.readString(this.female instanceof Utf8 ? (Utf8)this.female : null);

      this.ses = in.readString(this.ses instanceof Utf8 ? (Utf8)this.ses : null);

      this.schtyp = in.readString(this.schtyp instanceof Utf8 ? (Utf8)this.schtyp : null);

      this.prog = in.readString(this.prog instanceof Utf8 ? (Utf8)this.prog : null);

      this.read = in.readDouble();

      this.write = in.readDouble();

      this.math = in.readDouble();

      this.science = in.readDouble();

      this.socst = in.readDouble();

      this.honors = in.readString(this.honors instanceof Utf8 ? (Utf8)this.honors : null);

      this.awards = in.readDouble();

      this.cid = in.readInt();

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readDouble();
          break;

        case 1:
          this.female = in.readString(this.female instanceof Utf8 ? (Utf8)this.female : null);
          break;

        case 2:
          this.ses = in.readString(this.ses instanceof Utf8 ? (Utf8)this.ses : null);
          break;

        case 3:
          this.schtyp = in.readString(this.schtyp instanceof Utf8 ? (Utf8)this.schtyp : null);
          break;

        case 4:
          this.prog = in.readString(this.prog instanceof Utf8 ? (Utf8)this.prog : null);
          break;

        case 5:
          this.read = in.readDouble();
          break;

        case 6:
          this.write = in.readDouble();
          break;

        case 7:
          this.math = in.readDouble();
          break;

        case 8:
          this.science = in.readDouble();
          break;

        case 9:
          this.socst = in.readDouble();
          break;

        case 10:
          this.honors = in.readString(this.honors instanceof Utf8 ? (Utf8)this.honors : null);
          break;

        case 11:
          this.awards = in.readDouble();
          break;

        case 12:
          this.cid = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










